// Code generated by templ@v0.2.364 DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "strconv"
import "github.com/magnuswahlstrand/htmx-experiments/types"

func Color(trigger string, color string, animate bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_2 = []any{templ.SafeClass("p-5 ease-in-out	duration-1000 " + color)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_2...)
		if err != nil {
			return err
		}
		var var_3 = []any{templ.SafeClass("p-5 " + color)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_3...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div id=\"color\"")
		if err != nil {
			return err
		}
		if animate {
			_, err = templBuffer.WriteString(" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_2).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-get=\"/color?animate=true\"")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString(" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_3).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-get=\"/color\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" hx-trigger=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(trigger))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-swap=\"outerHTML\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(`"current": "` + color + `", "trigger": "` + trigger + `"`))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_4 := `&nbsp;`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Description() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_5 := templ.GetChildren(ctx)
		if var_5 == nil {
			var_5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"text-lg mb-4\">")
		if err != nil {
			return err
		}
		var_6 := `A collection of examples using `
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a href=\"https://htmx.org/\">")
		if err != nil {
			return err
		}
		var_7 := `htmx`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		var_8 := `.`
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <ul class=\"list-disc list-inside ml-5\"><li>")
		if err != nil {
			return err
		}
		var_9 := `HTML generated server-side from a backend built in Go with`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <a href=\"https://gofiber.io\">")
		if err != nil {
			return err
		}
		var_10 := `Fiber`
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		var_11 := `.`
		_, err = templBuffer.WriteString(var_11)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><li>")
		if err != nil {
			return err
		}
		var_12 := `Frontend is built using`
		_, err = templBuffer.WriteString(var_12)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <a href=\"https://tailwindcss.com/\">")
		if err != nil {
			return err
		}
		var_13 := `Tailwind CSS`
		_, err = templBuffer.WriteString(var_13)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a> ")
		if err != nil {
			return err
		}
		var_14 := `and`
		_, err = templBuffer.WriteString(var_14)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <a href=\"https://htmx.org/\">")
		if err != nil {
			return err
		}
		var_15 := `htmx`
		_, err = templBuffer.WriteString(var_15)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		var_16 := `.`
		_, err = templBuffer.WriteString(var_16)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><li>")
		if err != nil {
			return err
		}
		var_17 := `Deployed to Cloud Run.`
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul> ")
		if err != nil {
			return err
		}
		var_18 := `If you are interested in the source code, you can find it on `
		_, err = templBuffer.WriteString(var_18)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a href=\"https://github.com/magnuswahlstrand/htmx-experiments\">")
		if err != nil {
			return err
		}
		var_19 := `GitHub`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Page(serverVersion string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_20 := templ.GetChildren(ctx)
		if var_20 == nil {
			var_20 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if err != nil {
			return err
		}
		var_21 := `HTMX Examples`
		_, err = templBuffer.WriteString(var_21)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</title><script src=\"https://unpkg.com/htmx.org@1.9.6\" integrity=\"sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni\" crossorigin=\"anonymous\">")
		if err != nil {
			return err
		}
		var_22 := ``
		_, err = templBuffer.WriteString(var_22)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script><script src=\"https://unpkg.com/hyperscript.org@0.9.11\">")
		if err != nil {
			return err
		}
		var_23 := ``
		_, err = templBuffer.WriteString(var_23)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script><script src=\"https://unpkg.com/htmx.org/dist/ext/debug.js\">")
		if err != nil {
			return err
		}
		var_24 := ``
		_, err = templBuffer.WriteString(var_24)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script><script src=\"https://unpkg.com/htmx.org/dist/ext/sse.js\">")
		if err != nil {
			return err
		}
		var_25 := ``
		_, err = templBuffer.WriteString(var_25)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script><link rel=\"stylesheet\" href=\"styles.css\"></head><h1 class=\"text-4xl font-bold mb-4\">")
		if err != nil {
			return err
		}
		var_26 := `Hello HTMX`
		_, err = templBuffer.WriteString(var_26)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><body class=\"bg-gray-100 p-4\" _=\"on keyup[key is &#39;Escape&#39;] if #modal exists trigger closeModal on #modal\">")
		if err != nil {
			return err
		}
		err = Description().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = Examples().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = SseReconnecter(serverVersion).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = ModalStyling().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Spinner(suffix string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_27 := templ.GetChildren(ctx)
		if var_27 == nil {
			var_27 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<img id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("spinner-" + suffix))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"htmx-indicator h-6 w-6 animate-spin\" src=\"/spinner.svg\">")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func SseReconnecter(serverVersion string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_28 := templ.GetChildren(ctx)
		if var_28 == nil {
			var_28 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div hx-ext=\"sse\" sse-connect=\"/sse\"><div hx-get=\"/reload\" hx-trigger=\"sse:TriggerReload\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(`{"timestamp": "` + serverVersion + `"}`))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ClickToLoadRows(rows []int, page int) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_29 := templ.GetChildren(ctx)
		if var_29 == nil {
			var_29 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		for _, row := range rows {
			_, err = templBuffer.WriteString("<tr><td class=\"text-center\">")
			if err != nil {
				return err
			}
			var var_30 string = strconv.Itoa(row)
			_, err = templBuffer.WriteString(templ.EscapeString(var_30))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td><td class=\"text-center\">")
			if err != nil {
				return err
			}
			var_31 := `Agent Smith #`
			_, err = templBuffer.WriteString(var_31)
			if err != nil {
				return err
			}
			var var_32 string = strconv.Itoa(row)
			_, err = templBuffer.WriteString(templ.EscapeString(var_32))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td></tr>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<tr id=\"replaceMe\"><td colspan=\"2\"><button hx-target=\"#replaceMe\" hx-swap=\"outerHTML\" class=\"mt-3 mx-auto flex flex-row border-2 border-black rounded items-center px-3 py-2 gap-2 disabled:opacity-50 disabled:bg-stone-200 disabled:cursor-not-allowed\" hx-indicator=\"#spinner\" hx-disabled-elt=\"this\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("/click_to_load?page=" + strconv.Itoa(page)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_33 := `Load more agents`
		_, err = templBuffer.WriteString(var_33)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <img id=\"spinner\" class=\"htmx-indicator h-6 w-6 animate-spin\" src=\"/spinner.svg\"></button></td></tr>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

const buttonClasses = "mt-3 mx-auto flex flex-row border-2 border-black rounded items-center px-3 py-2 gap-2 disabled:opacity-50 disabled:bg-stone-200 disabled:cursor-not-allowed "

var initialRows = []int{1, 2}

func Modal() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_34 := templ.GetChildren(ctx)
		if var_34 == nil {
			var_34 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"modal\" _=\"on closeModal add .closing then wait for animationend then remove me\"><div class=\"modal-underlay\" _=\"on click trigger closeModal\"></div><div class=\"modal-content\"><h1 class=\"text-2xl font-semibold mb-2\">")
		if err != nil {
			return err
		}
		var_35 := `Modal Dialog`
		_, err = templBuffer.WriteString(var_35)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1> ")
		if err != nil {
			return err
		}
		var_36 := `This is the modal content.`
		_, err = templBuffer.WriteString(var_36)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_37 := `You can put anything here, like text, or a form, or an image. Press 'Escape' to close it.`
		_, err = templBuffer.WriteString(var_37)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <br>")
		if err != nil {
			return err
		}
		var var_38 = []any{buttonClasses}
		err = templ.RenderCSSItems(ctx, templBuffer, var_38...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<button class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_38).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" _=\"on click trigger closeModal\">")
		if err != nil {
			return err
		}
		var_39 := `Close`
		_, err = templBuffer.WriteString(var_39)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ContactShared(contact types.Contact, edit bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_40 := templ.GetChildren(ctx)
		if var_40 == nil {
			var_40 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"flex flex-col\"><label class=\"block text-gray-700 text-sm font-bold mb-2\">")
		if err != nil {
			return err
		}
		var_41 := `Name`
		_, err = templBuffer.WriteString(var_41)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"name\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(contact.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if !edit {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"></div><div class=\"flex flex-col\"><label class=\"block text-gray-700 text-sm font-bold mb-2\">")
		if err != nil {
			return err
		}
		var_42 := `Email Address`
		_, err = templBuffer.WriteString(var_42)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"email\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(contact.Email))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if !edit {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ContactForm(contact types.Contact, edit bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_43 := templ.GetChildren(ctx)
		if var_43 == nil {
			var_43 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if edit {
			_, err = templBuffer.WriteString("<form hx-put=\"/contacts/1\" hx-target=\"this\" hx-swap=\"outerHTML\" class=\"\">")
			if err != nil {
				return err
			}
			err = ContactShared(contact, edit).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<div class=\"flex flex-row mt-4 gap-2\"><button class=\"bg-blue-500 rounded-lg border-2 border-black p-2\">")
			if err != nil {
				return err
			}
			var_44 := `Submit`
			_, err = templBuffer.WriteString(var_44)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button><button class=\"bg-blue-500 rounded-lg border-2 border-black p-2\" hx-get=\"/contacts/1\">")
			if err != nil {
				return err
			}
			var_45 := `Cancel`
			_, err = templBuffer.WriteString(var_45)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button></div></form>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<div hx-target=\"this\" hx-swap=\"outerHTML\">")
			if err != nil {
				return err
			}
			err = ContactShared(contact, edit).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<button hx-get=\"/contacts/1/edit\" class=\"bg-blue-500 rounded-lg border-2 border-black p-2 mt-4\">")
			if err != nil {
				return err
			}
			var_46 := `Click To Edit`
			_, err = templBuffer.WriteString(var_46)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Tooltip(content string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_47 := templ.GetChildren(ctx)
		if var_47 == nil {
			var_47 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<span class=\"cursor-pointer relative group\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-info\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M12 16v-4\"></path><path d=\"M12 8h.01\"></path></svg><span class=\"absolute bottom-full left-0 w-64 bg-black text-white text-md p-2 rounded hidden group-hover:block transition duration-300\">")
		if err != nil {
			return err
		}
		var var_48 string = content
		_, err = templBuffer.WriteString(templ.EscapeString(var_48))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></span>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
